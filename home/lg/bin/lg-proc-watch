#!/bin/bash
# Copyright 2010 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
VERSION="1.0"

. ${HOME}/etc/shell.conf
. ${SHINCLUDE}/lg-functions

usage="Usage: `basename $0` [-h]elp [-u user] [-b binary] [-n window_name] [-c classname] [-k kill_time]\n
    -h: this help message\n
    -u: the username who should own the binary (defaults to \"lg\")\n
    -b: the binary which should be running (defaults to \"googleearth-bin\")\n
    -n: the name of the window which the binary should create (defaults to \"Google Earth\")\n
    -c: the string which should be set for the WM_CLASS instance (defaults to \"ge-lgS0\")\n
    -k: only try this many times (not equal to wall-clock time) befoore kill n exit (defaults to \"20\")\n
"

while getopts ":hu:b:n:c:k:" opt; do
  case $opt in
    h)
      echo -e $usage >&2
      exit 0;;
    u)
      cmd_user_name="${OPTARG}"
      ;;
    b)
      cmd_monitor_bin="${OPTARG}"
      ;;
    n)
      cmd_bin_win_name="${OPTARG}"
      ;;
    c)
      cmd_win_class="${OPTARG}"
      ;;
    k)
      cmd_kill_time=${OPTARG}
      ;;
    \?)
      echo "Invalid argument: -${OPTARG}" >&2
      echo -e $usage >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG reguires an argument" >&2
      echo -e $usage >&2
      exit 1
      ;;
  esac
done

user_name="${cmd_user_name:-lg}"
user_id=$( id -u ${user_name} )
monitor_bin="${cmd_monitor_bin:-googleearth-bin}"
bin_win_name="${cmd_bin_win_name:-Google Earth}"
win_class="${cmd_win_class:-ge-lgS0}"
kill_time=${cmd_kill_time:-20}
pid_find_fails=0
pid_find_max=6
retry_sleep=.3

while [ ${pid_find_fails} -lt ${pid_find_max} ]; do
  bin_pid=$( pgrep -o -u ${user_name} ${monitor_bin} 2>/dev/null )
  if [ -z "${bin_pid}" ]; then
    lg-log -l err -m "could not identify pid for bin \"${monitor_bin}\""
    sleep ${retry_sleep}
    pid_find_fails=$(( ${pid_find_fails} + 1 ))
  else
    break
  fi
done

while kill -0 ${bin_pid} 2>/dev/null; do
  lg-log -m "watching bin \"${monitor_bin}\""
  check_count=0
  while [ "${check_count}" -le "${kill_time}" ]; do
    bin_window=$( xdotool search --all --pid ${bin_pid} --name "${bin_win_name}" 2>/dev/null ) || break
    if [ -n "${bin_window}" ] && [[ ! "$( xprop -id ${bin_window} WM_CLASS 2>/dev/null )" =~ "${win_class}" ]]; then
      lg-log -m "adjusting window properites for window id \"${bin_window}\" from pid \"${bin_pid}\""
      xdotool set_window --classname ${win_class} ${bin_window} 2>/dev/null && { \
        sleep ${retry_sleep}
        lg-log -m "restarting window manager"
        echo "awesome.restart()" | awesome-client;
      }
      check_count=$(( ${check_count}+1 ))
      sleep ${retry_sleep}
    else
      sleep ${retry_sleep}
    fi
  done
done

lg-log -m "killing pid \"${bin_pid}\""
kill ${bin_pid}
sleep ${retry_sleep}
