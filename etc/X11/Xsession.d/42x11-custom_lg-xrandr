# POSIX SHELL compliance desired(required?)
# includes and vars
if [ -r "/lg/personavars.txt" ]; then . /lg/personavars.txt; fi
FRAME_NO="$( cat /lg/frame 2>/dev/null )"
if [ -n "${DHCP_RANDR}" ]; then RANDR="${DHCP_RANDR}"; else RANDR="right"; fi
NVIDIA_VERSION=$( nvidia-settings --version | awk '/version/ {print $3}' )
LOGFILE="/tmp/${USER}_xrandr.log"
LG_SCREEN_WIDTH=${DHCP_SCREEN_WIDTH:-1920}
LG_SCREEN_HEIGHT=${DHCP_SCREEN_HEIGHT:-1080}

{ date; echo "NVIDIA=${NVIDIA_VERSION}" ; } >${LOGFILE}
# we are assuming we want "HDMI" to be before "DVI", hence the sort
RANDR_OUTPUTS="$( xrandr -q | awk '/^[A-Z].+-[0-9]\ connected\ / { print $1 }' | sort -r )"
OUTPUT_COUNT="$( echo ${RANDR_OUTPUTS} | wc -w )"
MY_OUTPUT=1
RANDR_ORDER="--right-of"
# re-organize frame numbers
if [ ${FRAME_NO} -gt 4 ]; then
    FRAME_NO=$( echo "$FRAME_NO-8" | bc )
    # use FRAME_NO absolute values (like 2 instead of -2)
    FRAME_NO=$(( ${FRAME_NO}+4 ))
    RANDR_ORDER="--left-of"
fi

for output in ${RANDR_OUTPUTS}; do
    if [ "${MY_OUTPUT}" -eq 1 ]; then
        if [ "${MY_OUTPUT}" -eq "${OUTPUT_COUNT}" ] || [ "${MY_OUTPUT}" -eq "$(( ${OUTPUT_COUNT}-1 ))" ]; then
            RANDR_PREFIX=""
        else
            RANDR_PREFIX="$output"
        fi
        # place the first of the span of other screens at 0x0
        USE_RANDR_ORDER="--pos 0x0"
    elif [ "${MY_OUTPUT}" -lt "${OUTPUT_COUNT}" ]; then
        RANDR_PREFIX="$output"
        USE_RANDR_ORDER="${RANDR_ORDER}"
    else
        RANDR_PREFIX=""
        if [ "${FRAME_NO}" -eq 0 ]; then
            # place the touchscreen centered BELOW the span of other screens
            USE_RANDR_ORDER="--pos $(( ((${LG_SCREEN_HEIGHT}*(${OUTPUT_COUNT}-1))/2) - (${LG_SCREEN_WIDTH}/2) ))x$(( ${LG_SCREEN_WIDTH}+60 ))" 
        else
            USE_RANDR_ORDER="${RANDR_ORDER}"
        fi
    fi
    if [ "${FRAME_NO}" -eq 0 ] && [ "${MY_OUTPUT}" -eq "${OUTPUT_COUNT}" ]; then
        logger -p local3.info "$0: adding xrandr options for output: \"${MY_OUTPUT}\" of \"${OUTPUT_COUNT}\" on frame: \"${FRAME_NO}\""
        RANDR_OPTIONS="${RANDR_PREFIX} --output ${output} --auto --rotate normal ${USE_RANDR_ORDER} ${RANDR_OPTIONS}"
        MY_OUTPUT=$(( ${MY_OUTPUT}+1 ))
    else
        logger -p local3.info "$0: adding xrandr options for output: \"${MY_OUTPUT}\" of \"${OUTPUT_COUNT}\" on frame: \"${FRAME_NO}\""
        RANDR_OPTIONS="${RANDR_PREFIX} --output ${output} --auto --rotate ${RANDR} ${USE_RANDR_ORDER} ${RANDR_OPTIONS}"
        MY_OUTPUT=$(( ${MY_OUTPUT}+1 ))
    fi
done

logger -p local3.info "$0: executing xrandr with options: \"${RANDR_OPTIONS}\""
xrandr --verbose ${RANDR_OPTIONS} | logger -s -p local3.err 2>>${LOGFILE} >>${LOGFILE}

# vim:set ai et sts=4 ts=4 sw=4 expandtab filetype=sh:
